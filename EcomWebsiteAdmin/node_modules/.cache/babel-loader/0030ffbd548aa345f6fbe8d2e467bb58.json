{"ast":null,"code":"/**\n * The abstract operation ComputeExponentForMagnitude computes an exponent by which to scale a\n * number of the given magnitude (power of ten of the most significant digit) according to the\n * locale and the desired notation (scientific, engineering, or compact).\n */\nexport function ComputeExponentForMagnitude(numberFormat, magnitude, _a) {\n  var getInternalSlots = _a.getInternalSlots;\n  var internalSlots = getInternalSlots(numberFormat);\n  var notation = internalSlots.notation,\n    dataLocaleData = internalSlots.dataLocaleData,\n    numberingSystem = internalSlots.numberingSystem;\n  switch (notation) {\n    case 'standard':\n      return 0;\n    case 'scientific':\n      return magnitude;\n    case 'engineering':\n      return Math.floor(magnitude / 3) * 3;\n    default:\n      {\n        // Let exponent be an implementation- and locale-dependent (ILD) integer by which to scale a\n        // number of the given magnitude in compact notation for the current locale.\n        var compactDisplay = internalSlots.compactDisplay,\n          style = internalSlots.style,\n          currencyDisplay = internalSlots.currencyDisplay;\n        var thresholdMap = void 0;\n        if (style === 'currency' && currencyDisplay !== 'name') {\n          var currency = dataLocaleData.numbers.currency[numberingSystem] || dataLocaleData.numbers.currency[dataLocaleData.numbers.nu[0]];\n          thresholdMap = currency.short;\n        } else {\n          var decimal = dataLocaleData.numbers.decimal[numberingSystem] || dataLocaleData.numbers.decimal[dataLocaleData.numbers.nu[0]];\n          thresholdMap = compactDisplay === 'long' ? decimal.long : decimal.short;\n        }\n        if (!thresholdMap) {\n          return 0;\n        }\n        var num = String(Math.pow(10, magnitude));\n        var thresholds = Object.keys(thresholdMap); // TODO: this can be pre-processed\n        if (num < thresholds[0]) {\n          return 0;\n        }\n        if (num > thresholds[thresholds.length - 1]) {\n          return thresholds[thresholds.length - 1].length - 1;\n        }\n        var i = thresholds.indexOf(num);\n        if (i === -1) {\n          return 0;\n        }\n        // See https://unicode.org/reports/tr35/tr35-numbers.html#Compact_Number_Formats\n        // Special handling if the pattern is precisely `0`.\n        var magnitudeKey = thresholds[i];\n        // TODO: do we need to handle plural here?\n        var compactPattern = thresholdMap[magnitudeKey].other;\n        if (compactPattern === '0') {\n          return 0;\n        }\n        // Example: in zh-TW, `10000000` maps to `0000Ëê¨`. So we need to return 8 - 4 = 4 here.\n        return magnitudeKey.length - thresholdMap[magnitudeKey].other.match(/0+/)[0].length;\n      }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}