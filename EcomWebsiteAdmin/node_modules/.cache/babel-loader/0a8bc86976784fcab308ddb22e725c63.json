{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport { IntlMessageFormat } from 'intl-messageformat';\nimport memoize, { strategies } from '@formatjs/fast-memoize';\nimport { UnsupportedFormatterError } from './error';\nexport function filterProps(props, allowlist, defaults) {\n  if (defaults === void 0) {\n    defaults = {};\n  }\n  return allowlist.reduce(function (filtered, name) {\n    if (name in props) {\n      filtered[name] = props[name];\n    } else if (name in defaults) {\n      filtered[name] = defaults[name];\n    }\n    return filtered;\n  }, {});\n}\nvar defaultErrorHandler = function (error) {\n  // @ts-ignore just so we don't need to declare dep on @types/node\n  if (process.env.NODE_ENV !== 'production') {\n    console.error(error);\n  }\n};\nvar defaultWarnHandler = function (warning) {\n  // @ts-ignore just so we don't need to declare dep on @types/node\n  if (process.env.NODE_ENV !== 'production') {\n    console.warn(warning);\n  }\n};\nexport var DEFAULT_INTL_CONFIG = {\n  formats: {},\n  messages: {},\n  timeZone: undefined,\n  defaultLocale: 'en',\n  defaultFormats: {},\n  fallbackOnEmptyString: true,\n  onError: defaultErrorHandler,\n  onWarn: defaultWarnHandler\n};\nexport function createIntlCache() {\n  return {\n    dateTime: {},\n    number: {},\n    message: {},\n    relativeTime: {},\n    pluralRules: {},\n    list: {},\n    displayNames: {}\n  };\n}\nfunction createFastMemoizeCache(store) {\n  return {\n    create: function () {\n      return {\n        get: function (key) {\n          return store[key];\n        },\n        set: function (key, value) {\n          store[key] = value;\n        }\n      };\n    }\n  };\n}\n/**\n * Create intl formatters and populate cache\n * @param cache explicit cache to prevent leaking memory\n */\nexport function createFormatters(cache) {\n  if (cache === void 0) {\n    cache = createIntlCache();\n  }\n  var RelativeTimeFormat = Intl.RelativeTimeFormat;\n  var ListFormat = Intl.ListFormat;\n  var DisplayNames = Intl.DisplayNames;\n  var getDateTimeFormat = memoize(function () {\n    var _a;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return new ((_a = Intl.DateTimeFormat).bind.apply(_a, __spreadArray([void 0], args, false)))();\n  }, {\n    cache: createFastMemoizeCache(cache.dateTime),\n    strategy: strategies.variadic\n  });\n  var getNumberFormat = memoize(function () {\n    var _a;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return new ((_a = Intl.NumberFormat).bind.apply(_a, __spreadArray([void 0], args, false)))();\n  }, {\n    cache: createFastMemoizeCache(cache.number),\n    strategy: strategies.variadic\n  });\n  var getPluralRules = memoize(function () {\n    var _a;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return new ((_a = Intl.PluralRules).bind.apply(_a, __spreadArray([void 0], args, false)))();\n  }, {\n    cache: createFastMemoizeCache(cache.pluralRules),\n    strategy: strategies.variadic\n  });\n  return {\n    getDateTimeFormat: getDateTimeFormat,\n    getNumberFormat: getNumberFormat,\n    getMessageFormat: memoize(function (message, locales, overrideFormats, opts) {\n      return new IntlMessageFormat(message, locales, overrideFormats, __assign({\n        formatters: {\n          getNumberFormat: getNumberFormat,\n          getDateTimeFormat: getDateTimeFormat,\n          getPluralRules: getPluralRules\n        }\n      }, opts || {}));\n    }, {\n      cache: createFastMemoizeCache(cache.message),\n      strategy: strategies.variadic\n    }),\n    getRelativeTimeFormat: memoize(function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return new (RelativeTimeFormat.bind.apply(RelativeTimeFormat, __spreadArray([void 0], args, false)))();\n    }, {\n      cache: createFastMemoizeCache(cache.relativeTime),\n      strategy: strategies.variadic\n    }),\n    getPluralRules: getPluralRules,\n    getListFormat: memoize(function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return new (ListFormat.bind.apply(ListFormat, __spreadArray([void 0], args, false)))();\n    }, {\n      cache: createFastMemoizeCache(cache.list),\n      strategy: strategies.variadic\n    }),\n    getDisplayNames: memoize(function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return new (DisplayNames.bind.apply(DisplayNames, __spreadArray([void 0], args, false)))();\n    }, {\n      cache: createFastMemoizeCache(cache.displayNames),\n      strategy: strategies.variadic\n    })\n  };\n}\nexport function getNamedFormat(formats, type, name, onError) {\n  var formatType = formats && formats[type];\n  var format;\n  if (formatType) {\n    format = formatType[name];\n  }\n  if (format) {\n    return format;\n  }\n  onError(new UnsupportedFormatterError(\"No \".concat(type, \" format named: \").concat(name)));\n}","map":null,"metadata":{},"sourceType":"module"}