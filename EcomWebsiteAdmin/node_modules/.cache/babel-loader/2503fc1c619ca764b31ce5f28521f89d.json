{"ast":null,"code":"import { getMagnitude } from '../utils';\nimport { ComputeExponentForMagnitude } from './ComputeExponentForMagnitude';\nimport { FormatNumericToString } from './FormatNumericToString';\n/**\n * The abstract operation ComputeExponent computes an exponent (power of ten) by which to scale x\n * according to the number formatting settings. It handles cases such as 999 rounding up to 1000,\n * requiring a different exponent.\n *\n * NOT IN SPEC: it returns [exponent, magnitude].\n */\nexport function ComputeExponent(numberFormat, x, _a) {\n  var getInternalSlots = _a.getInternalSlots;\n  if (x === 0) {\n    return [0, 0];\n  }\n  if (x < 0) {\n    x = -x;\n  }\n  var magnitude = getMagnitude(x);\n  var exponent = ComputeExponentForMagnitude(numberFormat, magnitude, {\n    getInternalSlots: getInternalSlots\n  });\n  // Preserve more precision by doing multiplication when exponent is negative.\n  x = exponent < 0 ? x * Math.pow(10, -exponent) : x / Math.pow(10, exponent);\n  var formatNumberResult = FormatNumericToString(getInternalSlots(numberFormat), x);\n  if (formatNumberResult.roundedNumber === 0) {\n    return [exponent, magnitude];\n  }\n  var newMagnitude = getMagnitude(formatNumberResult.roundedNumber);\n  if (newMagnitude === magnitude - exponent) {\n    return [exponent, magnitude];\n  }\n  return [ComputeExponentForMagnitude(numberFormat, magnitude + 1, {\n    getInternalSlots: getInternalSlots\n  }), magnitude + 1];\n}","map":null,"metadata":{},"sourceType":"module"}