{"ast":null,"code":"import { eventPropTypes } from './components/EditorPropTypes';\nexport var isFunction = function (x) {\n  return typeof x === 'function';\n};\nvar isEventProp = function (name) {\n  return name in eventPropTypes;\n};\nvar eventAttrToEventName = function (attrName) {\n  return attrName.substr(2);\n};\nexport var configHandlers2 = function (handlerLookup, on, off, adapter, prevProps, props, boundHandlers) {\n  var prevEventKeys = Object.keys(prevProps).filter(isEventProp);\n  var currEventKeys = Object.keys(props).filter(isEventProp);\n  var removedKeys = prevEventKeys.filter(function (key) {\n    return props[key] === undefined;\n  });\n  var addedKeys = currEventKeys.filter(function (key) {\n    return prevProps[key] === undefined;\n  });\n  removedKeys.forEach(function (key) {\n    // remove event handler\n    var eventName = eventAttrToEventName(key);\n    var wrappedHandler = boundHandlers[eventName];\n    off(eventName, wrappedHandler);\n    delete boundHandlers[eventName];\n  });\n  addedKeys.forEach(function (key) {\n    var wrappedHandler = adapter(handlerLookup, key);\n    var eventName = eventAttrToEventName(key);\n    boundHandlers[eventName] = wrappedHandler;\n    on(eventName, wrappedHandler);\n  });\n};\nexport var configHandlers = function (editor, prevProps, props, boundHandlers, lookup) {\n  return configHandlers2(lookup, editor.on.bind(editor), editor.off.bind(editor),\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n  function (handlerLookup, key) {\n    return function (e) {\n      var _a;\n      return (_a = handlerLookup(key)) === null || _a === void 0 ? void 0 : _a(e, editor);\n    };\n  }, prevProps, props, boundHandlers);\n};\nvar unique = 0;\nexport var uuid = function (prefix) {\n  var time = Date.now();\n  var random = Math.floor(Math.random() * 1000000000);\n  unique++;\n  return prefix + '_' + random + unique + String(time);\n};\nexport var isTextareaOrInput = function (element) {\n  return element !== null && (element.tagName.toLowerCase() === 'textarea' || element.tagName.toLowerCase() === 'input');\n};\nvar normalizePluginArray = function (plugins) {\n  if (typeof plugins === 'undefined' || plugins === '') {\n    return [];\n  }\n  return Array.isArray(plugins) ? plugins : plugins.split(' ');\n};\n// eslint-disable-next-line max-len\nexport var mergePlugins = function (initPlugins, inputPlugins) {\n  return normalizePluginArray(initPlugins).concat(normalizePluginArray(inputPlugins));\n};\nexport var isBeforeInputEventAvailable = function () {\n  return window.InputEvent && typeof InputEvent.prototype.getTargetRanges === 'function';\n};\nexport var isInDoc = function (elem) {\n  if (!('isConnected' in Node.prototype)) {\n    // Fallback for IE and old Edge\n    var current = elem;\n    var parent_1 = elem.parentNode;\n    while (parent_1 != null) {\n      current = parent_1;\n      parent_1 = current.parentNode;\n    }\n    return current === elem.ownerDocument;\n  }\n  return elem.isConnected;\n};\nexport var setMode = function (editor, mode) {\n  if (editor !== undefined) {\n    if (editor.mode != null && typeof editor.mode === 'object' && typeof editor.mode.set === 'function') {\n      editor.mode.set(mode);\n    } else {\n      // support TinyMCE 4\n      editor.setMode(mode);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}