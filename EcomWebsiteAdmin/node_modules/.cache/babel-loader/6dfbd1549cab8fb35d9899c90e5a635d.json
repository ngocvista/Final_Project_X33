{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _isNativeReflectConstruct from \"@babel/runtime/helpers/esm/isNativeReflectConstruct\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nfunction _callSuper(t, o, e) {\n  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));\n}\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport classNames from 'classnames';\nimport ResizeObserver from 'rc-resize-observer';\nimport omit from \"rc-util/es/omit\";\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport { throttleByAnimationFrameDecorator } from '../_util/throttleByAnimationFrame';\nimport { addObserveTarget, getFixedBottom, getFixedTop, getTargetRect, removeObserveTarget } from './utils';\nfunction getDefaultTarget() {\n  return typeof window !== 'undefined' ? window : null;\n}\nvar AffixStatus;\n(function (AffixStatus) {\n  AffixStatus[AffixStatus[\"None\"] = 0] = \"None\";\n  AffixStatus[AffixStatus[\"Prepare\"] = 1] = \"Prepare\";\n})(AffixStatus || (AffixStatus = {}));\nvar Affix = /*#__PURE__*/function (_React$Component) {\n  _inherits(Affix, _React$Component);\n  function Affix() {\n    var _this;\n    _classCallCheck(this, Affix);\n    _this = _callSuper(this, Affix, arguments);\n    _this.state = {\n      status: AffixStatus.None,\n      lastAffix: false,\n      prevTarget: null\n    };\n    _this.getOffsetTop = function () {\n      var _this$props = _this.props,\n        offsetBottom = _this$props.offsetBottom,\n        offsetTop = _this$props.offsetTop;\n      return offsetBottom === undefined && offsetTop === undefined ? 0 : offsetTop;\n    };\n    _this.getOffsetBottom = function () {\n      return _this.props.offsetBottom;\n    };\n    _this.savePlaceholderNode = function (node) {\n      _this.placeholderNode = node;\n    };\n    _this.saveFixedNode = function (node) {\n      _this.fixedNode = node;\n    };\n    // =================== Measure ===================\n    _this.measure = function () {\n      var _this$state = _this.state,\n        status = _this$state.status,\n        lastAffix = _this$state.lastAffix;\n      var onChange = _this.props.onChange;\n      var targetFunc = _this.getTargetFunc();\n      if (status !== AffixStatus.Prepare || !_this.fixedNode || !_this.placeholderNode || !targetFunc) {\n        return;\n      }\n      var offsetTop = _this.getOffsetTop();\n      var offsetBottom = _this.getOffsetBottom();\n      var targetNode = targetFunc();\n      if (!targetNode) {\n        return;\n      }\n      var newState = {\n        status: AffixStatus.None\n      };\n      var targetRect = getTargetRect(targetNode);\n      var placeholderReact = getTargetRect(_this.placeholderNode);\n      var fixedTop = getFixedTop(placeholderReact, targetRect, offsetTop);\n      var fixedBottom = getFixedBottom(placeholderReact, targetRect, offsetBottom);\n      if (placeholderReact.top === 0 && placeholderReact.left === 0 && placeholderReact.width === 0 && placeholderReact.height === 0) {\n        return;\n      }\n      if (fixedTop !== undefined) {\n        newState.affixStyle = {\n          position: 'fixed',\n          top: fixedTop,\n          width: placeholderReact.width,\n          height: placeholderReact.height\n        };\n        newState.placeholderStyle = {\n          width: placeholderReact.width,\n          height: placeholderReact.height\n        };\n      } else if (fixedBottom !== undefined) {\n        newState.affixStyle = {\n          position: 'fixed',\n          bottom: fixedBottom,\n          width: placeholderReact.width,\n          height: placeholderReact.height\n        };\n        newState.placeholderStyle = {\n          width: placeholderReact.width,\n          height: placeholderReact.height\n        };\n      }\n      newState.lastAffix = !!newState.affixStyle;\n      if (onChange && lastAffix !== newState.lastAffix) {\n        onChange(newState.lastAffix);\n      }\n      _this.setState(newState);\n    };\n    // @ts-ignore TS6133\n    _this.prepareMeasure = function () {\n      // event param is used before. Keep compatible ts define here.\n      _this.setState({\n        status: AffixStatus.Prepare,\n        affixStyle: undefined,\n        placeholderStyle: undefined\n      });\n      // Test if `updatePosition` called\n      if (process.env.NODE_ENV === 'test') {\n        var onTestUpdatePosition = _this.props.onTestUpdatePosition;\n        onTestUpdatePosition === null || onTestUpdatePosition === void 0 ? void 0 : onTestUpdatePosition();\n      }\n    };\n    return _this;\n  }\n  _createClass(Affix, [{\n    key: \"getTargetFunc\",\n    value: function getTargetFunc() {\n      var getTargetContainer = this.context.getTargetContainer;\n      var target = this.props.target;\n      if (target !== undefined) {\n        return target;\n      }\n      return getTargetContainer !== null && getTargetContainer !== void 0 ? getTargetContainer : getDefaultTarget;\n    }\n    // Event handler\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n      var targetFunc = this.getTargetFunc();\n      if (targetFunc) {\n        // [Legacy] Wait for parent component ref has its value.\n        // We should use target as directly element instead of function which makes element check hard.\n        this.timeout = setTimeout(function () {\n          addObserveTarget(targetFunc(), _this2);\n          // Mock Event object.\n          _this2.updatePosition();\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var prevTarget = this.state.prevTarget;\n      var targetFunc = this.getTargetFunc();\n      var newTarget = (targetFunc === null || targetFunc === void 0 ? void 0 : targetFunc()) || null;\n      if (prevTarget !== newTarget) {\n        removeObserveTarget(this);\n        if (newTarget) {\n          addObserveTarget(newTarget, this);\n          // Mock Event object.\n          this.updatePosition();\n        }\n        // eslint-disable-next-line react/no-did-update-set-state\n        this.setState({\n          prevTarget: newTarget\n        });\n      }\n      if (prevProps.offsetTop !== this.props.offsetTop || prevProps.offsetBottom !== this.props.offsetBottom) {\n        this.updatePosition();\n      }\n      this.measure();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearTimeout(this.timeout);\n      removeObserveTarget(this);\n      this.updatePosition.cancel();\n      // https://github.com/ant-design/ant-design/issues/22683\n      this.lazyUpdatePosition.cancel();\n    }\n    // Handle realign logic\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition() {\n      this.prepareMeasure();\n    }\n  }, {\n    key: \"lazyUpdatePosition\",\n    value: function lazyUpdatePosition() {\n      var targetFunc = this.getTargetFunc();\n      var affixStyle = this.state.affixStyle;\n      // Check position change before measure to make Safari smooth\n      if (targetFunc && affixStyle) {\n        var offsetTop = this.getOffsetTop();\n        var offsetBottom = this.getOffsetBottom();\n        var targetNode = targetFunc();\n        if (targetNode && this.placeholderNode) {\n          var targetRect = getTargetRect(targetNode);\n          var placeholderReact = getTargetRect(this.placeholderNode);\n          var fixedTop = getFixedTop(placeholderReact, targetRect, offsetTop);\n          var fixedBottom = getFixedBottom(placeholderReact, targetRect, offsetBottom);\n          if (fixedTop !== undefined && affixStyle.top === fixedTop || fixedBottom !== undefined && affixStyle.bottom === fixedBottom) {\n            return;\n          }\n        }\n      }\n      // Directly call prepare measure since it's already throttled.\n      this.prepareMeasure();\n    }\n    // =================== Render ===================\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n      var _this$state2 = this.state,\n        affixStyle = _this$state2.affixStyle,\n        placeholderStyle = _this$state2.placeholderStyle;\n      var _this$props2 = this.props,\n        affixPrefixCls = _this$props2.affixPrefixCls,\n        children = _this$props2.children;\n      var className = classNames(_defineProperty({}, affixPrefixCls, !!affixStyle));\n      var props = omit(this.props, ['prefixCls', 'offsetTop', 'offsetBottom', 'target', 'onChange', 'affixPrefixCls']);\n      // Omit this since `onTestUpdatePosition` only works on test.\n      if (process.env.NODE_ENV === 'test') {\n        props = omit(props, ['onTestUpdatePosition']);\n      }\n      return /*#__PURE__*/React.createElement(ResizeObserver, {\n        onResize: function onResize() {\n          _this3.updatePosition();\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", _extends({}, props, {\n        ref: this.savePlaceholderNode\n      }), affixStyle && /*#__PURE__*/React.createElement(\"div\", {\n        style: placeholderStyle,\n        \"aria-hidden\": \"true\"\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: className,\n        ref: this.saveFixedNode,\n        style: affixStyle\n      }, /*#__PURE__*/React.createElement(ResizeObserver, {\n        onResize: function onResize() {\n          _this3.updatePosition();\n        }\n      }, children))));\n    }\n  }]);\n  return Affix;\n}(React.Component);\nAffix.contextType = ConfigContext;\n__decorate([throttleByAnimationFrameDecorator()], Affix.prototype, \"updatePosition\", null);\n__decorate([throttleByAnimationFrameDecorator()], Affix.prototype, \"lazyUpdatePosition\", null);\nvar AffixFC = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var customizePrefixCls = props.prefixCls;\n  var _React$useContext = React.useContext(ConfigContext),\n    getPrefixCls = _React$useContext.getPrefixCls;\n  var affixPrefixCls = getPrefixCls('affix', customizePrefixCls);\n  var affixProps = _extends(_extends({}, props), {\n    affixPrefixCls: affixPrefixCls\n  });\n  return /*#__PURE__*/React.createElement(Affix, _extends({}, affixProps, {\n    ref: ref\n  }));\n});\nif (process.env.NODE_ENV !== 'production') {\n  AffixFC.displayName = 'Affix';\n}\nexport default AffixFC;","map":null,"metadata":{},"sourceType":"module"}