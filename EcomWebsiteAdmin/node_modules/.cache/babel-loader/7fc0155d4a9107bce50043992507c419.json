{"ast":null,"code":"/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport useIntl from './useIntl';\nimport { shallowEqual } from '../utils';\nfunction areEqual(prevProps, nextProps) {\n  var values = prevProps.values,\n    otherProps = __rest(prevProps, [\"values\"]);\n  var nextValues = nextProps.values,\n    nextOtherProps = __rest(nextProps, [\"values\"]);\n  return shallowEqual(nextValues, values) && shallowEqual(otherProps, nextOtherProps);\n}\nfunction FormattedMessage(props) {\n  var intl = useIntl();\n  var formatMessage = intl.formatMessage,\n    _a = intl.textComponent,\n    Text = _a === void 0 ? React.Fragment : _a;\n  var id = props.id,\n    description = props.description,\n    defaultMessage = props.defaultMessage,\n    values = props.values,\n    children = props.children,\n    _b = props.tagName,\n    Component = _b === void 0 ? Text : _b,\n    ignoreTag = props.ignoreTag;\n  var descriptor = {\n    id: id,\n    description: description,\n    defaultMessage: defaultMessage\n  };\n  var nodes = formatMessage(descriptor, values, {\n    ignoreTag: ignoreTag\n  });\n  if (typeof children === 'function') {\n    return children(Array.isArray(nodes) ? nodes : [nodes]);\n  }\n  if (Component) {\n    return React.createElement(Component, null, React.Children.toArray(nodes));\n  }\n  return React.createElement(React.Fragment, null, nodes);\n}\nFormattedMessage.displayName = 'FormattedMessage';\nvar MemoizedFormattedMessage = React.memo(FormattedMessage, areEqual);\nMemoizedFormattedMessage.displayName = 'MemoizedFormattedMessage';\nexport default MemoizedFormattedMessage;","map":null,"metadata":{},"sourceType":"module"}