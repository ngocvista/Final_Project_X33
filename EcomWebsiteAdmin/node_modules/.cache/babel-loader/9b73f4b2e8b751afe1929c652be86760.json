{"ast":null,"code":"var _jsxFileName = \"D:\\\\EcomWebsiteProject\\\\EcomWebsiteAdmin\\\\src\\\\views\\\\app-views\\\\apps\\\\chat\\\\ChatMenu.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Badge, Input } from \"antd\";\nimport AvatarStatus from \"components/shared-components/AvatarStatus\";\nimport { COLOR_1 } from \"constants/ChartConstant\";\nimport { SearchOutlined } from \"@ant-design/icons\";\nimport { useHistory } from \"react-router-dom\";\nconst ChatMenu = ({\n  match,\n  location,\n  chatRooms\n}) => {\n  var _location$pathname$ma;\n  const [list, setList] = useState(chatRooms || []); // Sử dụng chatRooms từ props\n  const [searchText, setSearchText] = useState(\"\");\n  let history = useHistory();\n  useEffect(() => {\n    setList(chatRooms); // Cập nhật list khi props chatRooms thay đổi\n  }, [chatRooms]);\n  const openChat = id => {\n    const data = list.map(elm => {\n      if (elm.id === id) {\n        elm.unread = 0; // Reset unread count khi mở chat\n      }\n      return elm;\n    });\n    setList(data);\n    history.push(`${match.url}/${id}`);\n  };\n  const searchOnChange = e => {\n    const query = e.target.value.toLowerCase();\n    setSearchText(query);\n    const filteredData = chatRooms.filter(item => item.customer.fullName.toLowerCase().includes(query));\n    setList(filteredData);\n  };\n  const id = parseInt(((_location$pathname$ma = location.pathname.match(/\\/([^/]+)\\/?$/)) === null || _location$pathname$ma === void 0 ? void 0 : _location$pathname$ma[1]) || null);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-menu\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-menu-toolbar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"Search\",\n    onChange: searchOnChange,\n    prefix: /*#__PURE__*/React.createElement(SearchOutlined, {\n      className: \"font-size-lg mr-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 19\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-menu-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, list.map((chatRoom, i) => /*#__PURE__*/React.createElement(\"div\", {\n    key: `chat-item-${chatRoom.id}`,\n    onClick: () => openChat(chatRoom.id),\n    className: `chat-menu-list-item ${i === list.length - 1 ? \"last\" : \"\"} ${chatRoom.id === id ? \"selected\" : \"\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(AvatarStatus, {\n    src: chatRoom.customer.avatar,\n    name: chatRoom.customer.fullName,\n    subTitle: chatRoom.messages.length > 0 ? chatRoom.messages[chatRoom.messages.length - 1].content : \"No messages\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-menu-list-item-time\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 15\n    }\n  }, chatRoom.messages.length > 0 ? new Date(chatRoom.messages[chatRoom.messages.length - 1].timestamp).toLocaleTimeString() : \"\"), chatRoom.unread === 0 ? /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }) : /*#__PURE__*/React.createElement(Badge, {\n    count: chatRoom.unread,\n    style: {\n      backgroundColor: COLOR_1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }))))));\n};\nexport default ChatMenu;","map":{"version":3,"names":["React","useState","useEffect","Badge","Input","AvatarStatus","COLOR_1","SearchOutlined","useHistory","ChatMenu","match","location","chatRooms","_location$pathname$ma","list","setList","searchText","setSearchText","history","openChat","id","data","map","elm","unread","push","url","searchOnChange","e","query","target","value","toLowerCase","filteredData","filter","item","customer","fullName","includes","parseInt","pathname","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onChange","prefix","chatRoom","i","key","onClick","length","src","avatar","name","subTitle","messages","content","Date","timestamp","toLocaleTimeString","count","style","backgroundColor"],"sources":["D:/EcomWebsiteProject/EcomWebsiteAdmin/src/views/app-views/apps/chat/ChatMenu.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Badge, Input } from \"antd\";\r\nimport AvatarStatus from \"components/shared-components/AvatarStatus\";\r\nimport { COLOR_1 } from \"constants/ChartConstant\";\r\nimport { SearchOutlined } from \"@ant-design/icons\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatMenu = ({ match, location, chatRooms }) => {\r\n  const [list, setList] = useState(chatRooms || []); // Sử dụng chatRooms từ props\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  let history = useHistory();\r\n\r\n  useEffect(() => {\r\n    setList(chatRooms); // Cập nhật list khi props chatRooms thay đổi\r\n  }, [chatRooms]);\r\n\r\n  const openChat = (id) => {\r\n    const data = list.map((elm) => {\r\n      if (elm.id === id) {\r\n        elm.unread = 0; // Reset unread count khi mở chat\r\n      }\r\n      return elm;\r\n    });\r\n    setList(data);\r\n    history.push(`${match.url}/${id}`);\r\n  };\r\n\r\n  const searchOnChange = (e) => {\r\n    const query = e.target.value.toLowerCase();\r\n    setSearchText(query);\r\n    const filteredData = chatRooms.filter((item) =>\r\n      item.customer.fullName.toLowerCase().includes(query)\r\n    );\r\n    setList(filteredData);\r\n  };\r\n\r\n  const id = parseInt(location.pathname.match(/\\/([^/]+)\\/?$/)?.[1] || null);\r\n\r\n  return (\r\n    <div className=\"chat-menu\">\r\n      <div className=\"chat-menu-toolbar\">\r\n        <Input\r\n          placeholder=\"Search\"\r\n          onChange={searchOnChange}\r\n          prefix={<SearchOutlined className=\"font-size-lg mr-2\" />}\r\n        />\r\n      </div>\r\n      <div className=\"chat-menu-list\">\r\n        {list.map((chatRoom, i) => (\r\n          <div\r\n            key={`chat-item-${chatRoom.id}`}\r\n            onClick={() => openChat(chatRoom.id)}\r\n            className={`chat-menu-list-item ${\r\n              i === list.length - 1 ? \"last\" : \"\"\r\n            } ${chatRoom.id === id ? \"selected\" : \"\"}`}\r\n          >\r\n            <AvatarStatus\r\n              src={chatRoom.customer.avatar}\r\n              name={chatRoom.customer.fullName}\r\n              subTitle={\r\n                chatRoom.messages.length > 0\r\n                  ? chatRoom.messages[chatRoom.messages.length - 1].content\r\n                  : \"No messages\"\r\n              }\r\n            />\r\n            <div className=\"text-right\">\r\n              <div className=\"chat-menu-list-item-time\">\r\n                {chatRoom.messages.length > 0\r\n                  ? new Date(\r\n                      chatRoom.messages[chatRoom.messages.length - 1].timestamp\r\n                    ).toLocaleTimeString()\r\n                  : \"\"}\r\n              </div>\r\n              {chatRoom.unread === 0 ? (\r\n                <span></span>\r\n              ) : (\r\n                <Badge\r\n                  count={chatRoom.unread}\r\n                  style={{ backgroundColor: COLOR_1 }}\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatMenu;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}