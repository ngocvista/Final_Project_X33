{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { createFormatters, DEFAULT_INTL_CONFIG } from './utils';\nimport { InvalidConfigError, MissingDataError } from './error';\nimport { formatNumber, formatNumberToParts } from './number';\nimport { formatRelativeTime } from './relativeTime';\nimport { formatDate, formatDateToParts, formatTime, formatTimeToParts, formatDateTimeRange } from './dateTime';\nimport { formatPlural } from './plural';\nimport { formatMessage } from './message';\nimport { formatList, formatListToParts } from './list';\nimport { formatDisplayName } from './displayName';\nfunction messagesContainString(messages) {\n  var firstMessage = messages ? messages[Object.keys(messages)[0]] : undefined;\n  return typeof firstMessage === 'string';\n}\nfunction verifyConfigMessages(config) {\n  if (config.onWarn && config.defaultRichTextElements && messagesContainString(config.messages || {})) {\n    config.onWarn(\"[@formatjs/intl] \\\"defaultRichTextElements\\\" was specified but \\\"message\\\" was not pre-compiled. \\nPlease consider using \\\"@formatjs/cli\\\" to pre-compile your messages for performance.\\nFor more details see https://formatjs.io/docs/getting-started/message-distribution\");\n  }\n}\n/**\n * Create intl object\n * @param config intl config\n * @param cache cache for formatter instances to prevent memory leak\n */\nexport function createIntl(config, cache) {\n  var formatters = createFormatters(cache);\n  var resolvedConfig = __assign(__assign({}, DEFAULT_INTL_CONFIG), config);\n  var locale = resolvedConfig.locale,\n    defaultLocale = resolvedConfig.defaultLocale,\n    onError = resolvedConfig.onError;\n  if (!locale) {\n    if (onError) {\n      onError(new InvalidConfigError(\"\\\"locale\\\" was not configured, using \\\"\".concat(defaultLocale, \"\\\" as fallback. See https://formatjs.io/docs/react-intl/api#intlshape for more details\")));\n    }\n    // Since there's no registered locale data for `locale`, this will\n    // fallback to the `defaultLocale` to make sure things can render.\n    // The `messages` are overridden to the `defaultProps` empty object\n    // to maintain referential equality across re-renders. It's assumed\n    // each <FormattedMessage> contains a `defaultMessage` prop.\n    resolvedConfig.locale = resolvedConfig.defaultLocale || 'en';\n  } else if (!Intl.NumberFormat.supportedLocalesOf(locale).length && onError) {\n    onError(new MissingDataError(\"Missing locale data for locale: \\\"\".concat(locale, \"\\\" in Intl.NumberFormat. Using default locale: \\\"\").concat(defaultLocale, \"\\\" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details\")));\n  } else if (!Intl.DateTimeFormat.supportedLocalesOf(locale).length && onError) {\n    onError(new MissingDataError(\"Missing locale data for locale: \\\"\".concat(locale, \"\\\" in Intl.DateTimeFormat. Using default locale: \\\"\").concat(defaultLocale, \"\\\" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details\")));\n  }\n  verifyConfigMessages(resolvedConfig);\n  return __assign(__assign({}, resolvedConfig), {\n    formatters: formatters,\n    formatNumber: formatNumber.bind(null, resolvedConfig, formatters.getNumberFormat),\n    formatNumberToParts: formatNumberToParts.bind(null, resolvedConfig, formatters.getNumberFormat),\n    formatRelativeTime: formatRelativeTime.bind(null, resolvedConfig, formatters.getRelativeTimeFormat),\n    formatDate: formatDate.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatDateToParts: formatDateToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatTime: formatTime.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatDateTimeRange: formatDateTimeRange.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatTimeToParts: formatTimeToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatPlural: formatPlural.bind(null, resolvedConfig, formatters.getPluralRules),\n    formatMessage: formatMessage.bind(null, resolvedConfig, formatters),\n    $t: formatMessage.bind(null, resolvedConfig, formatters),\n    formatList: formatList.bind(null, resolvedConfig, formatters.getListFormat),\n    formatListToParts: formatListToParts.bind(null, resolvedConfig, formatters.getListFormat),\n    formatDisplayName: formatDisplayName.bind(null, resolvedConfig, formatters.getDisplayNames)\n  });\n}","map":null,"metadata":{},"sourceType":"module"}