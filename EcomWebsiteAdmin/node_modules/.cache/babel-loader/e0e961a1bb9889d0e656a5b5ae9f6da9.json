{"ast":null,"code":"import { repeat } from '../utils';\n/**\n * TODO: dedup with intl-pluralrules and support BigInt\n * https://tc39.es/ecma402/#sec-torawfixed\n * @param x a finite non-negative Number or BigInt\n * @param minFraction and integer between 0 and 20\n * @param maxFraction and integer between 0 and 20\n */\nexport function ToRawFixed(x, minFraction, maxFraction) {\n  var f = maxFraction;\n  var n = Math.round(x * Math.pow(10, f));\n  var xFinal = n / Math.pow(10, f);\n  // n is a positive integer, but it is possible to be greater than 1e21.\n  // In such case we will go the slow path.\n  // See also: https://tc39.es/ecma262/#sec-numeric-types-number-tostring\n  var m;\n  if (n < 1e21) {\n    m = n.toString();\n  } else {\n    m = n.toString();\n    var _a = m.split('e'),\n      mantissa = _a[0],\n      exponent = _a[1];\n    m = mantissa.replace('.', '');\n    m = m + repeat('0', Math.max(+exponent - m.length + 1, 0));\n  }\n  var int;\n  if (f !== 0) {\n    var k = m.length;\n    if (k <= f) {\n      var z = repeat('0', f + 1 - k);\n      m = z + m;\n      k = f + 1;\n    }\n    var a = m.slice(0, k - f);\n    var b = m.slice(k - f);\n    m = \"\".concat(a, \".\").concat(b);\n    int = a.length;\n  } else {\n    int = m.length;\n  }\n  var cut = maxFraction - minFraction;\n  while (cut > 0 && m[m.length - 1] === '0') {\n    m = m.slice(0, -1);\n    cut--;\n  }\n  if (m[m.length - 1] === '.') {\n    m = m.slice(0, -1);\n  }\n  return {\n    formattedString: m,\n    roundedNumber: xFinal,\n    integerDigitsCount: int\n  };\n}","map":null,"metadata":{},"sourceType":"module"}