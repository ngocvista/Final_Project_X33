{"ast":null,"code":"var _jsxFileName = \"D:\\\\EcomWebsiteProject\\\\EcomWebsiteAdmin\\\\src\\\\components\\\\shared-components\\\\ChartWidget\\\\index.js\";\nimport React, { useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card } from \"antd\";\nimport ApexChart from \"react-apexcharts\";\nimport { apexLineChartDefaultOption, apexBarChartDefaultOption, apexAreaChartDefaultOption } from \"constants/ChartConstant\";\nconst titleStyle = {\n  position: \"absolute\",\n  zIndex: \"1\"\n};\nconst extraStyle = {\n  position: \"absolute\",\n  zIndex: \"1\",\n  right: \"0\",\n  top: \"-2px\"\n};\nconst getChartTypeDefaultOption = type => {\n  switch (type) {\n    case \"line\":\n      return apexLineChartDefaultOption;\n    case \"bar\":\n      return apexBarChartDefaultOption;\n    case \"area\":\n      return apexAreaChartDefaultOption;\n    default:\n      return apexLineChartDefaultOption;\n  }\n};\n\n// Helper function to format numbers as Vietnamese currency\nconst formatCurrencyVND = value => {\n  return new Intl.NumberFormat(\"vi-VN\", {\n    style: \"currency\",\n    currency: \"VND\"\n  }).format(value);\n};\nconst ChartWidget = ({\n  title,\n  series,\n  width,\n  height,\n  xAxis,\n  customOptions,\n  card,\n  type,\n  extra\n}) => {\n  let options = getChartTypeDefaultOption(type);\n  const isMobile = window.innerWidth < 768;\n  const extraRef = useRef(null);\n  const chartRef = useRef();\n\n  // Update options to use xAxis categories and format y-axis labels\n  options = {\n    ...options,\n    xaxis: {\n      ...options.xaxis,\n      categories: xAxis || []\n    },\n    yaxis: {\n      ...options.yaxis,\n      labels: {\n        formatter: formatCurrencyVND\n      }\n    },\n    tooltip: {\n      ...options.tooltip,\n      y: {\n        formatter: formatCurrencyVND\n      }\n    }\n  };\n\n  // Merge custom options if provided\n  if (customOptions) {\n    options = {\n      ...options,\n      ...customOptions\n    };\n  }\n  const renderChart = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chartRef\",\n    ref: chartRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ApexChart, {\n    options: options,\n    type: type,\n    series: series,\n    width: width,\n    height: height,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }));\n  return /*#__PURE__*/React.createElement(React.Fragment, null, card ? /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"position-relative\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: !isMobile ? titleStyle : {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 14\n    }\n  }, title) && /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"font-weight-bold\",\n    style: !isMobile ? titleStyle : {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 15\n    }\n  }, title), extra && /*#__PURE__*/React.createElement(\"div\", {\n    ref: extraRef,\n    style: !isMobile ? extraStyle : {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 15\n    }\n  }, extra), renderChart)) : renderChart);\n};\nChartWidget.propTypes = {\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  series: PropTypes.array.isRequired,\n  xAxis: PropTypes.array,\n  customOptions: PropTypes.object,\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  card: PropTypes.bool,\n  type: PropTypes.string\n};\nChartWidget.defaultProps = {\n  series: [],\n  height: 300,\n  width: \"100%\",\n  card: true,\n  type: \"line\"\n};\nexport default ChartWidget;","map":{"version":3,"names":["React","useRef","PropTypes","Card","ApexChart","apexLineChartDefaultOption","apexBarChartDefaultOption","apexAreaChartDefaultOption","titleStyle","position","zIndex","extraStyle","right","top","getChartTypeDefaultOption","type","formatCurrencyVND","value","Intl","NumberFormat","style","currency","format","ChartWidget","title","series","width","height","xAxis","customOptions","card","extra","options","isMobile","window","innerWidth","extraRef","chartRef","xaxis","categories","yaxis","labels","formatter","tooltip","y","renderChart","createElement","className","ref","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","propTypes","oneOfType","string","element","array","isRequired","object","number","bool","defaultProps"],"sources":["D:/EcomWebsiteProject/EcomWebsiteAdmin/src/components/shared-components/ChartWidget/index.js"],"sourcesContent":["import React, { useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Card } from \"antd\";\r\nimport ApexChart from \"react-apexcharts\";\r\nimport {\r\n  apexLineChartDefaultOption,\r\n  apexBarChartDefaultOption,\r\n  apexAreaChartDefaultOption,\r\n} from \"constants/ChartConstant\";\r\n\r\nconst titleStyle = {\r\n  position: \"absolute\",\r\n  zIndex: \"1\",\r\n};\r\n\r\nconst extraStyle = {\r\n  position: \"absolute\",\r\n  zIndex: \"1\",\r\n  right: \"0\",\r\n  top: \"-2px\",\r\n};\r\n\r\nconst getChartTypeDefaultOption = (type) => {\r\n  switch (type) {\r\n    case \"line\":\r\n      return apexLineChartDefaultOption;\r\n    case \"bar\":\r\n      return apexBarChartDefaultOption;\r\n    case \"area\":\r\n      return apexAreaChartDefaultOption;\r\n    default:\r\n      return apexLineChartDefaultOption;\r\n  }\r\n};\r\n\r\n// Helper function to format numbers as Vietnamese currency\r\nconst formatCurrencyVND = (value) => {\r\n  return new Intl.NumberFormat(\"vi-VN\", {\r\n    style: \"currency\",\r\n    currency: \"VND\",\r\n  }).format(value);\r\n};\r\n\r\nconst ChartWidget = ({\r\n  title,\r\n  series,\r\n  width,\r\n  height,\r\n  xAxis,\r\n  customOptions,\r\n  card,\r\n  type,\r\n  extra,\r\n}) => {\r\n  let options = getChartTypeDefaultOption(type);\r\n  const isMobile = window.innerWidth < 768;\r\n\r\n  const extraRef = useRef(null);\r\n  const chartRef = useRef();\r\n\r\n  // Update options to use xAxis categories and format y-axis labels\r\n  options = {\r\n    ...options,\r\n    xaxis: {\r\n      ...options.xaxis,\r\n      categories: xAxis || [],\r\n    },\r\n    yaxis: {\r\n      ...options.yaxis,\r\n      labels: {\r\n        formatter: formatCurrencyVND,\r\n      },\r\n    },\r\n    tooltip: {\r\n      ...options.tooltip,\r\n      y: {\r\n        formatter: formatCurrencyVND,\r\n      },\r\n    },\r\n  };\r\n\r\n  // Merge custom options if provided\r\n  if (customOptions) {\r\n    options = { ...options, ...customOptions };\r\n  }\r\n\r\n  const renderChart = (\r\n    <div className=\"chartRef\" ref={chartRef}>\r\n      <ApexChart\r\n        options={options}\r\n        type={type}\r\n        series={series}\r\n        width={width}\r\n        height={height}\r\n      />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {card ? (\r\n        <Card>\r\n          <div className=\"position-relative\">\r\n            {<div style={!isMobile ? titleStyle : {}}>{title}</div> && (\r\n              <h4\r\n                className=\"font-weight-bold\"\r\n                style={!isMobile ? titleStyle : {}}\r\n              >\r\n                {title}\r\n              </h4>\r\n            )}\r\n            {extra && (\r\n              <div ref={extraRef} style={!isMobile ? extraStyle : {}}>\r\n                {extra}\r\n              </div>\r\n            )}\r\n            {renderChart}\r\n          </div>\r\n        </Card>\r\n      ) : (\r\n        renderChart\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nChartWidget.propTypes = {\r\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\r\n  series: PropTypes.array.isRequired,\r\n  xAxis: PropTypes.array,\r\n  customOptions: PropTypes.object,\r\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  card: PropTypes.bool,\r\n  type: PropTypes.string,\r\n};\r\n\r\nChartWidget.defaultProps = {\r\n  series: [],\r\n  height: 300,\r\n  width: \"100%\",\r\n  card: true,\r\n  type: \"line\",\r\n};\r\n\r\nexport default ChartWidget;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}