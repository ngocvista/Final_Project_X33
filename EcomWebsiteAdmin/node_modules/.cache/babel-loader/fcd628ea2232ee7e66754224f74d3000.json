{"ast":null,"code":"/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport { __assign, __extends, __rest, __spreadArray } from \"tslib\";\nimport * as React from 'react';\nimport { Provider } from './injectIntl';\nimport { DEFAULT_INTL_CONFIG, invariantIntlContext, assignUniqueKeysToParts, shallowEqual } from '../utils';\nimport { formatMessage as coreFormatMessage, createIntl as coreCreateIntl, createIntlCache } from '@formatjs/intl';\nimport { isFormatXMLElementFn } from 'intl-messageformat';\nfunction processIntlConfig(config) {\n  return {\n    locale: config.locale,\n    timeZone: config.timeZone,\n    fallbackOnEmptyString: config.fallbackOnEmptyString,\n    formats: config.formats,\n    textComponent: config.textComponent,\n    messages: config.messages,\n    defaultLocale: config.defaultLocale,\n    defaultFormats: config.defaultFormats,\n    onError: config.onError,\n    onWarn: config.onWarn,\n    wrapRichTextChunksInFragment: config.wrapRichTextChunksInFragment,\n    defaultRichTextElements: config.defaultRichTextElements\n  };\n}\nfunction assignUniqueKeysToFormatXMLElementFnArgument(values) {\n  if (!values) {\n    return values;\n  }\n  return Object.keys(values).reduce(function (acc, k) {\n    var v = values[k];\n    acc[k] = isFormatXMLElementFn(v) ? assignUniqueKeysToParts(v) : v;\n    return acc;\n  }, {});\n}\nvar formatMessage = function (config, formatters, descriptor, rawValues) {\n  var rest = [];\n  for (var _i = 4; _i < arguments.length; _i++) {\n    rest[_i - 4] = arguments[_i];\n  }\n  var values = assignUniqueKeysToFormatXMLElementFnArgument(rawValues);\n  var chunks = coreFormatMessage.apply(void 0, __spreadArray([config, formatters, descriptor, values], rest, false));\n  if (Array.isArray(chunks)) {\n    return React.Children.toArray(chunks);\n  }\n  return chunks;\n};\n/**\n * Create intl object\n * @param config intl config\n * @param cache cache for formatter instances to prevent memory leak\n */\nexport var createIntl = function (_a, cache) {\n  var rawDefaultRichTextElements = _a.defaultRichTextElements,\n    config = __rest(_a, [\"defaultRichTextElements\"]);\n  var defaultRichTextElements = assignUniqueKeysToFormatXMLElementFnArgument(rawDefaultRichTextElements);\n  var coreIntl = coreCreateIntl(__assign(__assign(__assign({}, DEFAULT_INTL_CONFIG), config), {\n    defaultRichTextElements: defaultRichTextElements\n  }), cache);\n  return __assign(__assign({}, coreIntl), {\n    formatMessage: formatMessage.bind(null, {\n      locale: coreIntl.locale,\n      timeZone: coreIntl.timeZone,\n      fallbackOnEmptyString: coreIntl.fallbackOnEmptyString,\n      formats: coreIntl.formats,\n      defaultLocale: coreIntl.defaultLocale,\n      defaultFormats: coreIntl.defaultFormats,\n      messages: coreIntl.messages,\n      onError: coreIntl.onError,\n      defaultRichTextElements: defaultRichTextElements\n    }, coreIntl.formatters)\n  });\n};\nvar IntlProvider = /** @class */function (_super) {\n  __extends(IntlProvider, _super);\n  function IntlProvider() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.cache = createIntlCache();\n    _this.state = {\n      cache: _this.cache,\n      intl: createIntl(processIntlConfig(_this.props), _this.cache),\n      prevConfig: processIntlConfig(_this.props)\n    };\n    return _this;\n  }\n  IntlProvider.getDerivedStateFromProps = function (props, _a) {\n    var prevConfig = _a.prevConfig,\n      cache = _a.cache;\n    var config = processIntlConfig(props);\n    if (!shallowEqual(prevConfig, config)) {\n      return {\n        intl: createIntl(config, cache),\n        prevConfig: config\n      };\n    }\n    return null;\n  };\n  IntlProvider.prototype.render = function () {\n    invariantIntlContext(this.state.intl);\n    return React.createElement(Provider, {\n      value: this.state.intl\n    }, this.props.children);\n  };\n  IntlProvider.displayName = 'IntlProvider';\n  IntlProvider.defaultProps = DEFAULT_INTL_CONFIG;\n  return IntlProvider;\n}(React.PureComponent);\nexport default IntlProvider;","map":null,"metadata":{},"sourceType":"module"}